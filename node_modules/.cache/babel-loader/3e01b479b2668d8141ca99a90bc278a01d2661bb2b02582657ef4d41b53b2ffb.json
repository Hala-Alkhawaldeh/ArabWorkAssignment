{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"AddGoogleMap\",\n  data() {\n    return {\n      center: {\n        lat: 39.7837304,\n        lng: -100.4458825\n      },\n      locationMarkers: [],\n      locPlaces: [],\n      existingPlace: null\n    };\n  },\n  props: {},\n  mounted() {},\n  methods: {\n    initMarker(loc) {\n      this.existingPlace = loc;\n      if (this.existingPlace) {\n        const marker = {\n          lat: Number(this.existingPlace.latitude),\n          lng: Number(this.existingPlace.longitude)\n        };\n        this.center = marker;\n        this.locationMarkers.push({\n          position: marker\n        });\n        // this.locPlaces.push(this.existingPlace);\n\n        this.existingPlace = null;\n      }\n    },\n    locateGeoLocation: function () {\n      navigator.geolocation.getCurrentPosition(res => {\n        this.center = {\n          lat: res.coords.latitude,\n          lng: res.coords.longitude\n        };\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","center","lat","lng","locationMarkers","locPlaces","existingPlace","props","mounted","methods","initMarker","loc","marker","Number","latitude","longitude","push","position","locateGeoLocation","navigator","geolocation","getCurrentPosition","res","coords"],"sources":["src/components/maps.vue"],"sourcesContent":["<template>\n  <div class=\"w-[500px]\"> \n    <label>\n        <gmap-autocomplete @place_changed=\"initMarker\"></gmap-autocomplete>\n        <button @click=\"addLocationMarker\">Add</button>\n      </label>\n    <gmap-map :zoom=\"14\" :center=\"center\" style=\"width: 500%; height: 400px\">\n      <gmap-marker\n        :key=\"index\"\n        v-for=\"(m, index) in locationMarkers\"\n        :position=\"m.position\"\n        @click=\"center = m.position\"\n      ></gmap-marker>\n    </gmap-map>\n  </div>\n</template>\n   \n  <script>\nexport default {\n  name: \"AddGoogleMap\",\n  data() {\n    return {\n      center: {\n        lat: 39.7837304,\n        lng: -100.4458825,\n      },\n      locationMarkers: [],\n      locPlaces: [],\n      existingPlace: null,\n    };\n  },\n  props: {\n   \n  },\n\n  mounted() {\n   \n\n  },\n\n  methods: {\n    initMarker(loc) {\n      this.existingPlace = loc;\n      if (this.existingPlace) {\n        const marker = {\n          lat: Number(this.existingPlace.latitude),\n          lng: Number(this.existingPlace.longitude),\n        };\n        this.center = marker;\n        this.locationMarkers.push({ position: marker });\n        // this.locPlaces.push(this.existingPlace);\n      \n        this.existingPlace = null;\n      }\n    },\n    \n    locateGeoLocation: function () {\n      navigator.geolocation.getCurrentPosition((res) => {\n        this.center = {\n          lat: res.coords.latitude,\n          lng: res.coords.longitude,\n        };\n      });\n    },\n  },\n};\n</script>"],"mappings":";AAkBA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;QACAC,GAAA;QACAC,GAAA;MACA;MACAC,eAAA;MACAC,SAAA;MACAC,aAAA;IACA;EACA;EACAC,KAAA,GAEA;EAEAC,QAAA,GAGA;EAEAC,OAAA;IACAC,WAAAC,GAAA;MACA,KAAAL,aAAA,GAAAK,GAAA;MACA,SAAAL,aAAA;QACA,MAAAM,MAAA;UACAV,GAAA,EAAAW,MAAA,MAAAP,aAAA,CAAAQ,QAAA;UACAX,GAAA,EAAAU,MAAA,MAAAP,aAAA,CAAAS,SAAA;QACA;QACA,KAAAd,MAAA,GAAAW,MAAA;QACA,KAAAR,eAAA,CAAAY,IAAA;UAAAC,QAAA,EAAAL;QAAA;QACA;;QAEA,KAAAN,aAAA;MACA;IACA;IAEAY,iBAAA,WAAAA,CAAA;MACAC,SAAA,CAAAC,WAAA,CAAAC,kBAAA,CAAAC,GAAA;QACA,KAAArB,MAAA;UACAC,GAAA,EAAAoB,GAAA,CAAAC,MAAA,CAAAT,QAAA;UACAX,GAAA,EAAAmB,GAAA,CAAAC,MAAA,CAAAR;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}